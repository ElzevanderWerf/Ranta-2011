{-# LANGUAGE PackageImports #-}
module Main where

import "gf" PGF
import TransProp
import System.Environment
import System.IO

main = do
  pgf <- readPGF "Prop.pgf"

  -- Read file
  args <- getArgs
  f <- readFile (args !! 0)
  let flines = lines f

  -- Translate and write to file
  outh <- openFile (args !! 1) WriteMode
  let doTransPGF = doTrans pgf (mkCId "PropLatex") (mkCId "PropEng") --lang of arg0 and lang of arg1?
  hPutStrLn outh (unlines (map doTransPGF flines))
  hClose outh

  -- Done message
  putStrLn "done"

--doTrans :: PGF -> Language -> Language -> String -> String
doTrans pgf from_l to_l s = case parse pgf from_l (startCat pgf) s of 
  ts -> unlines [linearize pgf to_l (transfers t) | t <- ts] 
  -- with randomly generated formulas, we may expect there is always a parse, bc the input file contains latex formulas that are randomly generated by the GF shell.
  -- I removed the noFreeVars check because gr also generates formulas with free variables, and I want them to be translated as well.
 where
   transfers t = transfer MOptimize t